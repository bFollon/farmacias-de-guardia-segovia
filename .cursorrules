# Farmacias de Guardia - Cursor Rules

## Project Context
Cross-platform pharmacy duty schedule app for Segovia, Spain. iOS app is complete and stable - DO NOT MODIFY unless specifically requested. Android app is in incremental migration to achieve feature parity.

## Architecture Patterns
- **Strategy Pattern** for PDF parsing (region-specific parsers)
- **Repository Pattern** for data access
- **Service-based architecture** with three-tier caching (memory ‚Üí persistent ‚Üí PDF parsing)
- **SOLID principles** throughout all code
- **ObservableObject** for iOS state management
- **Material3** design system for Android

## Development Workflow
- **Explain before implementing** - Always explain the purpose and scope of changes
- **Small incremental changes** - Limit scope to single features or bug fixes
- **Test frequently** - Ensure each change is testable and working
- **Match iOS patterns** when migrating to Android

## Collaborative Development Methodology
- **Explain First**: Always explain what you plan to do before making any edits
- **Request Approval**: Ask for explicit manual approval before implementing changes
- **Small Increments**: All edits must be in short, testable increments
- **Manual Testing**: Test each increment via manual testing and debug output
- **Adjust as Needed**: Adjust approach based on results from each test

### Development Process
1. **Explain the planned change and reasoning**
2. **Request explicit approval from user**
3. **Implement the small, testable change**
4. **Test and analyze debug output together**
5. **Adjust approach based on results**
6. **Repeat with next small increment**

### Communication Format
Always use this format for each increment:
```
## **[Increment Name] Plan**

### **What I will do:**
[Detailed explanation of the specific change]

### **Why this approach:**
[Reasoning behind the approach]

### **Specific changes:**
[Bullet points of exact changes to be made]

**May I proceed with [specific action]?**
```

### Key Rules
- NEVER make edits without explicit approval
- Keep changes small and focused on single functionality
- Always explain the reasoning behind decisions
- Wait for user confirmation before proceeding
- Test each increment thoroughly before moving to the next
- Be prepared to adjust based on user feedback and test results

## Platform-Specific Guidelines

### iOS (Swift/SwiftUI) - STABLE, DO NOT MODIFY
- Location: `ios/FarmaciasDeGuardiaEnSegovia/`
- Key patterns: Strategy pattern, ObservableObject, environmental values
- Testing: `xcodebuild test -scheme FarmaciasDeGuardiaEnSegovia -destination 'platform=iOS Simulator,name=iPhone 16 Pro'`

### Android (Kotlin/Jetpack Compose) - ACTIVE DEVELOPMENT
- Location: `android/app/src/main/java/com/example/farmaciasdeguardiaensegovia/`
- Key patterns: Mimic iOS architecture, Strategy pattern, Repository pattern
- PDF Libraries: iText7 (current), PDFBox (backup reference)
- Build: `cd android && ./gradlew assembleDebug`
- Testing: `cd android && ./gradlew test`

## PDF Processing Strategy
1. **Strategy Registration**: Register parsers in `PDFProcessingService` constructor using region IDs
2. **Column-based Extraction**: Use coordinate-based extraction with defined margins and column widths
3. **Parser Implementation**: Extend `ColumnBasedPDFParser`, implement region-specific layout handling
4. **Caching**: Always implement caching to avoid re-parsing same files
5. **Error Handling**: Graceful degradation when PDF structure changes

## Core Data Models
- **Region**: Core entity with `id`, `name`, `icon`, `pdfURL`, `metadata`
- **PharmacySchedule**: Links dates to shift-based pharmacy assignments
- **Pharmacy**: Extracted from PDF text with name/address parsing
- **DutyTimeSpan/DutyDate**: Time and date representations

## Current Android Status
- ‚úÖ Basic structure with Jetpack Compose + Material3
- ‚úÖ Splash screen with iOS-matching animations
- ‚úÖ Main screen with region selection grid
- ‚úÖ ZBS selection for Segovia Rural
- ‚úÖ PDF processing with strategy pattern
- ‚úÖ Persistent caching system
- ‚úÖ Cu√©llar implementation complete
- üîÑ **Next**: El Espinar parser and PDF view screen

## Regions & Parsers
- **üèõ Segovia Capital**: 3-column parser (dates, day shifts, night shifts)
- **üå≥ Cu√©llar**: 2-column parser (dates, pharmacies) - COMPLETE
- **‚õ∞ El Espinar**: 2-column parser (dates, pharmacies) - IN PROGRESS
- **üöú Segovia Rural**: Complex ZBS handling with 8 sub-areas

## Code Quality Standards
- Use meaningful variable and function names
- Avoid magic numbers and strings - make constants configurable
- Implement proper error handling and logging
- Follow platform-specific conventions
- Maintain consistency between iOS and Android implementations
- Use `DebugConfig.debugPrint()` for conditional logging

## Migration Guidelines
- **iOS implementation always takes precedence** for reference
- Use `android_full_migration_backup/` as reference only (has theme/config errors)
- Focus on architecture patterns: Strategy pattern, service-based architecture
- Ensure Android implementation matches iOS functionality closely

## Build Commands
- **iOS**: `xcodebuild test -scheme FarmaciasDeGuardiaEnSegovia -destination 'platform=iOS Simulator,name=iPhone 16 Pro'`
- **Android**: `cd android && ./gradlew assembleDebug`
- **Android Test**: `cd android && ./gradlew test`
